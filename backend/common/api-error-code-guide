# 🛠 API 에러 코드 가이드

> **📌 이 문서는 API에서 사용되는 에러 코드 체계와 사용 방법을 설명합니다.**  
> **✅ 실제 에러 코드 목록은 백엔드 리포지토리에서 관리되며, 최신 목록은 아래 파일을 참고하세요.**

🔗 **에러 코드 정의 위치:**  
👉 **[`src/constants/error.ts`](https://github.com/TindloLabs/backend-grabb/blob/main/src/constants/error.ts)** _(백엔드 리포지토리 참고)_

---

## 📌 **에러 코드 체계**

API에서 발생하는 에러 코드는 **900번대 이상**을 사용하며, 카테고리별로 정리됩니다.

| 범위          | 설명                   | 예시 코드                                              |
| ------------- | ---------------------- | ------------------------------------------------------ |
| `900` ~ `909` | 인증 및 권한 관련 오류 | `900: UNAUTHORIZED`, `901: FORBIDDEN`                  |
| `910` ~ `919` | 사용자 관련 오류       | `910: USER_NOT_FOUND`, `911: EMAIL_ALREADY_IN_USE`     |
| `920` ~ `929` | 관리자 관련 오류       | `920: ADMIN_NOT_FOUND`, `921: ADMIN_PERMISSION_DENIED` |
| `930` ~ `939` | 시스템 및 서버 오류    | `930: SERVER_ERROR`, `931: DATABASE_ERROR`             |

---

## 📌 **에러 코드 사용 방식**

> API에서는 클라이언트가 처리할 수 있도록 에러 코드와 메시지를 JSON 형식으로 반환합니다.  
> 에러 메시지는 기본적으로 영어로 제공되며, 클라이언트에서 다국어 지원을 처리할 수 있도록 `code`를 기준으로 메시지를 매핑하는 방식을 추천합니다.

### ✅ **에러 응답 예시**

```json
{
  "success": false,
  "statusCode": 401,
  "error": {
    "code": 910,
    "message": "User not found."
  }
}
```

### ✅ **NestJS에서 에러 코드 반환 예제**

```typescript
throw errorResponse('USER_NOT_FOUND', HttpStatus.UNAUTHORIZED);
```

### ✅ **에러 코드 추가 시 유의사항**

- **기존 코드 수정 금지** ❌: 기존 에러 코드를 수정하면 클라이언트와의 연동 문제가 발생할 수 있음.
- **중복 코드 방지** 🛑: 비슷한 의미의 에러 코드가 여러 개 생기지 않도록 주의.
- **백엔드 리포지토리 업데이트 필요** 🔄: 새로운 에러 코드를 추가한 경우, `src/constants/error.ts` 파일을 업데이트해야 함.

---

## 📌 **FAQ**

### ❓ **새로운 에러 코드를 추가하려면 어떻게 해야 하나요?**

1️⃣ 백엔드 리포지토리의 `src/constants/error.ts` 파일을 수정합니다.  
2️⃣ 기존 코드 체계를 참고하여 적절한 `ERROR_CODES`와 `ERROR_MESSAGES`를 추가합니다.  
3️⃣ 관련 API 서비스에서 추가한 에러 코드를 적용합니다.  
4️⃣ API 응답을 테스트하여 정상적으로 동작하는지 확인합니다.

---
